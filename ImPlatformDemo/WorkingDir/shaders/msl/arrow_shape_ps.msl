#include <metal_stdlib>
#include <metal_math>
#include <metal_texture>
using namespace metal;

#line 90 "core"
struct pixelOutput_0
{
    float4 output_0 [[color(0)]];
};


#line 90
struct pixelInput_0
{
    float4 col_0 [[user(COLOR)]];
    float2 uv_0 [[user(TEXCOORD)]];
};


#line 90
struct KernelContext_0
{
    texture2d<float, access::sample> texture0_0;
    sampler sampler0_0;
};


#line 36 "C:/git/DearWidgets/extern/ImPlatform/ImPlatformDemo/WorkingDir/shaders/hlsl_src/arrow_shape.hlsl"
[[fragment]] pixelOutput_0 main_ps(pixelInput_0 _S1 [[stage_in]], float4 pos_0 [[position]], texture2d<float, access::sample> texture0_1 [[texture(0)]], sampler sampler0_1 [[sampler(0)]])
{

#line 36
    KernelContext_0 kernelContext_0;

#line 36
    (&kernelContext_0)->texture0_0 = texture0_1;

#line 36
    (&kernelContext_0)->sampler0_0 = sampler0_1;


    thread float4 col_out_0 = float4(1.0, 1.0, 1.0, 1.0);


    float2 _S2 = _S1.uv_0 - float2(0.5) ;

#line 42
    thread float2 P_0 = _S2;
    P_0.y = - _S2.y;


    float x_0 = P_0.x;

#line 51
    float _S3 = abs(P_0.y);

#line 63
    col_out_0.xyz = float3(bool3(((min(max(abs(x_0 - 0.1666666716337204) - 0.25, _S3 - 0.25), max(0.75 * (abs(x_0) + _S3 - 0.5), max(abs(x_0 + 0.5), _S3) - 0.5))) < 0.0)) );


    float4 _S4 = col_out_0 * (_S1.col_0 * (((&kernelContext_0)->texture0_0).sample((sampler0_1), (_S1.uv_0))));

#line 66
    col_out_0 = _S4;

#line 66
    pixelOutput_0 _S5 = { _S4 };

    return _S5;
}

